//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `HBCheckout2`.
    static let hbCheckout2 = _R.storyboard.hbCheckout2()
    /// Storyboard `HBCheckout`.
    static let hbCheckout = _R.storyboard.hbCheckout()
    /// Storyboard `HBNotice`.
    static let hbNotice = _R.storyboard.hbNotice()
    /// Storyboard `HBUICollectionView`.
    static let hbuiCollectionView = _R.storyboard.hbuiCollectionView()
    /// Storyboard `HBUser`.
    static let hbUser = _R.storyboard.hbUser()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HBCheckout", bundle: ...)`
    static func hbCheckout(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hbCheckout)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HBCheckout2", bundle: ...)`
    static func hbCheckout2(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hbCheckout2)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HBNotice", bundle: ...)`
    static func hbNotice(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hbNotice)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HBUICollectionView", bundle: ...)`
    static func hbuiCollectionView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hbuiCollectionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HBUser", bundle: ...)`
    static func hbUser(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.hbUser)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `black-text`.
    static let blackText = Rswift.ColorResource(bundle: R.hostingBundle, name: "black-text")
    /// Color `gray-light`.
    static let grayLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray-light")
    /// Color `gray`.
    static let gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray")
    /// Color `orange`.
    static let orange = Rswift.ColorResource(bundle: R.hostingBundle, name: "orange")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black-text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blackText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blackText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `HoangKimtoiStudy.txt`.
    static let hoangKimtoiStudyTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "HoangKimtoiStudy", pathExtension: "txt")
    /// Resource file `SOLID.txt`.
    static let solidTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "SOLID", pathExtension: "txt")
    /// Resource file `Todo.txt`.
    static let todoTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "Todo", pathExtension: "txt")

    /// `bundle.url(forResource: "HoangKimtoiStudy", withExtension: "txt")`
    static func hoangKimtoiStudyTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hoangKimtoiStudyTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SOLID", withExtension: "txt")`
    static func solidTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.solidTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Todo", withExtension: "txt")`
    static func todoTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.todoTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 18 images.
  struct image {
    /// Image `AngleRightIcon`.
    static let angleRightIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AngleRightIcon")
    /// Image `CreditCard-1`.
    static let creditCard1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "CreditCard-1")
    /// Image `CreditCard`.
    static let creditCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "CreditCard")
    /// Image `angle-right`.
    static let angleRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "angle-right")
    /// Image `backgroundNotice`.
    static let backgroundNotice = Rswift.ImageResource(bundle: R.hostingBundle, name: "backgroundNotice")
    /// Image `bell`.
    static let bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell")
    /// Image `favouritesIcon`.
    static let favouritesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "favouritesIcon")
    /// Image `helpIcon`.
    static let helpIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpIcon")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `paymentIcon`.
    static let paymentIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "paymentIcon")
    /// Image `promotionsIcon`.
    static let promotionsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "promotionsIcon")
    /// Image `rectangle-1`.
    static let rectangle1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangle-1")
    /// Image `rectangle`.
    static let rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangle")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `selectedCheckBoxIcon`.
    static let selectedCheckBoxIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedCheckBoxIcon")
    /// Image `settingsIcon`.
    static let settingsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsIcon")
    /// Image `unselectedCheckBoxIcon`.
    static let unselectedCheckBoxIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedCheckBoxIcon")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AngleRightIcon", bundle: ..., traitCollection: ...)`
    static func angleRightIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angleRightIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CreditCard", bundle: ..., traitCollection: ...)`
    static func creditCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CreditCard-1", bundle: ..., traitCollection: ...)`
    static func creditCard1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditCard1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "angle-right", bundle: ..., traitCollection: ...)`
    static func angleRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.angleRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backgroundNotice", bundle: ..., traitCollection: ...)`
    static func backgroundNotice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundNotice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bell", bundle: ..., traitCollection: ...)`
    static func bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favouritesIcon", bundle: ..., traitCollection: ...)`
    static func favouritesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favouritesIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpIcon", bundle: ..., traitCollection: ...)`
    static func helpIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paymentIcon", bundle: ..., traitCollection: ...)`
    static func paymentIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "promotionsIcon", bundle: ..., traitCollection: ...)`
    static func promotionsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promotionsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rectangle", bundle: ..., traitCollection: ...)`
    static func rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rectangle-1", bundle: ..., traitCollection: ...)`
    static func rectangle1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedCheckBoxIcon", bundle: ..., traitCollection: ...)`
    static func selectedCheckBoxIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedCheckBoxIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingsIcon", bundle: ..., traitCollection: ...)`
    static func settingsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselectedCheckBoxIcon", bundle: ..., traitCollection: ...)`
    static func unselectedCheckBoxIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedCheckBoxIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `Checkout1TableViewCell`.
    static let checkout1TableViewCell = _R.nib._Checkout1TableViewCell()
    /// Nib `FilterViewController`.
    static let filterViewController = _R.nib._FilterViewController()
    /// Nib `HBCollectionViewCell`.
    static let hbCollectionViewCell = _R.nib._HBCollectionViewCell()
    /// Nib `HBFilterViewController`.
    static let hbFilterViewController = _R.nib._HBFilterViewController()
    /// Nib `HBInputNumberTableViewCell`.
    static let hbInputNumberTableViewCell = _R.nib._HBInputNumberTableViewCell()
    /// Nib `HBNoticeHeaderTableViewCell`.
    static let hbNoticeHeaderTableViewCell = _R.nib._HBNoticeHeaderTableViewCell()
    /// Nib `HBNoticeTableViewCell`.
    static let hbNoticeTableViewCell = _R.nib._HBNoticeTableViewCell()
    /// Nib `HBUserTableViewCell`.
    static let hbUserTableViewCell = _R.nib._HBUserTableViewCell()
    /// Nib `SelectedTableViewCell`.
    static let selectedTableViewCell = _R.nib._SelectedTableViewCell()
    /// Nib `SwichTableViewCell`.
    static let swichTableViewCell = _R.nib._SwichTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Checkout1TableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.checkout1TableViewCell) instead")
    static func checkout1TableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.checkout1TableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilterViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterViewController) instead")
    static func filterViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HBCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hbCollectionViewCell) instead")
    static func hbCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hbCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HBFilterViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hbFilterViewController) instead")
    static func hbFilterViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hbFilterViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HBInputNumberTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hbInputNumberTableViewCell) instead")
    static func hbInputNumberTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hbInputNumberTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HBNoticeHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hbNoticeHeaderTableViewCell) instead")
    static func hbNoticeHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hbNoticeHeaderTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HBNoticeTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hbNoticeTableViewCell) instead")
    static func hbNoticeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hbNoticeTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HBUserTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hbUserTableViewCell) instead")
    static func hbUserTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hbUserTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectedTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectedTableViewCell) instead")
    static func selectedTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectedTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SwichTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.swichTableViewCell) instead")
    static func swichTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.swichTableViewCell)
    }
    #endif

    static func checkout1TableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Checkout1TableViewCell? {
      return R.nib.checkout1TableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Checkout1TableViewCell
    }

    static func filterViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.filterViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func hbCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBCollectionViewCell? {
      return R.nib.hbCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBCollectionViewCell
    }

    static func hbFilterViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.hbFilterViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func hbInputNumberTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBInputNumberTableViewCell? {
      return R.nib.hbInputNumberTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBInputNumberTableViewCell
    }

    static func hbNoticeHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBNoticeHeaderTableViewCell? {
      return R.nib.hbNoticeHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBNoticeHeaderTableViewCell
    }

    static func hbNoticeTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBNoticeTableViewCell? {
      return R.nib.hbNoticeTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBNoticeTableViewCell
    }

    static func hbUserTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBUserTableViewCell? {
      return R.nib.hbUserTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBUserTableViewCell
    }

    static func selectedTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectedTableViewCell? {
      return R.nib.selectedTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectedTableViewCell
    }

    static func swichTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SwichTableViewCell? {
      return R.nib.swichTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SwichTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Checkout1TableViewCell`.
    static let checkout1TableViewCell: Rswift.ReuseIdentifier<Checkout1TableViewCell> = Rswift.ReuseIdentifier(identifier: "Checkout1TableViewCell")
    /// Reuse identifier `HBInputNumberTableViewCell`.
    static let hbInputNumberTableViewCell: Rswift.ReuseIdentifier<HBInputNumberTableViewCell> = Rswift.ReuseIdentifier(identifier: "HBInputNumberTableViewCell")
    /// Reuse identifier `HBNoticeCell`.
    static let hbNoticeCell: Rswift.ReuseIdentifier<HBNoticeTableViewCell> = Rswift.ReuseIdentifier(identifier: "HBNoticeCell")
    /// Reuse identifier `HBNoticeHeaderCell`.
    static let hbNoticeHeaderCell: Rswift.ReuseIdentifier<HBNoticeHeaderTableViewCell> = Rswift.ReuseIdentifier(identifier: "HBNoticeHeaderCell")
    /// Reuse identifier `HBUserTableViewCell`.
    static let hbUserTableViewCell: Rswift.ReuseIdentifier<HBUserTableViewCell> = Rswift.ReuseIdentifier(identifier: "HBUserTableViewCell")
    /// Reuse identifier `SelectedTableViewCell`.
    static let selectedTableViewCell: Rswift.ReuseIdentifier<SelectedTableViewCell> = Rswift.ReuseIdentifier(identifier: "SelectedTableViewCell")
    /// Reuse identifier `SwichTableViewCell`.
    static let swichTableViewCell: Rswift.ReuseIdentifier<SwichTableViewCell> = Rswift.ReuseIdentifier(identifier: "SwichTableViewCell")
    /// Reuse identifier `UICollectionCell`.
    static let uiCollectionCell: Rswift.ReuseIdentifier<HBCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "UICollectionCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HBNoticeHeaderTableViewCell.validate()
      try _HBNoticeTableViewCell.validate()
      try _HBUserTableViewCell.validate()
      try _SelectedTableViewCell.validate()
    }

    struct _Checkout1TableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = Checkout1TableViewCell

      let bundle = R.hostingBundle
      let identifier = "Checkout1TableViewCell"
      let name = "Checkout1TableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Checkout1TableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Checkout1TableViewCell
      }

      fileprivate init() {}
    }

    struct _FilterViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FilterViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HBCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HBCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "UICollectionCell"
      let name = "HBCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _HBFilterViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HBFilterViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HBInputNumberTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HBInputNumberTableViewCell

      let bundle = R.hostingBundle
      let identifier = "HBInputNumberTableViewCell"
      let name = "HBInputNumberTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBInputNumberTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBInputNumberTableViewCell
      }

      fileprivate init() {}
    }

    struct _HBNoticeHeaderTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HBNoticeHeaderTableViewCell

      let bundle = R.hostingBundle
      let identifier = "HBNoticeHeaderCell"
      let name = "HBNoticeHeaderTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBNoticeHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBNoticeHeaderTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backgroundNotice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundNotice' is used in nib 'HBNoticeHeaderTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'HBNoticeHeaderTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HBNoticeTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HBNoticeTableViewCell

      let bundle = R.hostingBundle
      let identifier = "HBNoticeCell"
      let name = "HBNoticeTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBNoticeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBNoticeTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AngleRightIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AngleRightIcon' is used in nib 'HBNoticeTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black-text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black-text' is used in storyboard 'HBNoticeTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HBUserTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HBUserTableViewCell

      let bundle = R.hostingBundle
      let identifier = "HBUserTableViewCell"
      let name = "HBUserTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HBUserTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HBUserTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "favouritesIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favouritesIcon' is used in nib 'HBUserTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black-text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black-text' is used in storyboard 'HBUserTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SelectedTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelectedTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SelectedTableViewCell"
      let name = "SelectedTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectedTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectedTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AngleRightIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AngleRightIcon' is used in nib 'SelectedTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "black-text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'black-text' is used in storyboard 'SelectedTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray' is used in storyboard 'SelectedTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SwichTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SwichTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SwichTableViewCell"
      let name = "SwichTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SwichTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SwichTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try hbCheckout.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try hbCheckout2.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try hbNotice.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try hbuiCollectionView.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try hbUser.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct hbCheckout2: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = XViewController

      let bundle = R.hostingBundle
      let hbCheckout2 = StoryboardViewControllerResource<HBCheckout2ViewController>(identifier: "HBCheckout2")
      let name = "HBCheckout2"
      let xViewController = StoryboardViewControllerResource<XViewController>(identifier: "XViewController")

      func hbCheckout2(_: Void = ()) -> HBCheckout2ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hbCheckout2)
      }

      func xViewController(_: Void = ()) -> XViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CreditCard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CreditCard' is used in storyboard 'HBCheckout2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selectedCheckBoxIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selectedCheckBoxIcon' is used in storyboard 'HBCheckout2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unselectedCheckBoxIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unselectedCheckBoxIcon' is used in storyboard 'HBCheckout2', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray' is used in storyboard 'HBCheckout2', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray-light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray-light' is used in storyboard 'HBCheckout2', but couldn't be loaded.") }
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'HBCheckout2', but couldn't be loaded.") }
        }
        if _R.storyboard.hbCheckout2().hbCheckout2() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hbCheckout2' could not be loaded from storyboard 'HBCheckout2' as 'HBCheckout2ViewController'.") }
        if _R.storyboard.hbCheckout2().xViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xViewController' could not be loaded from storyboard 'HBCheckout2' as 'XViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct hbCheckout: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HBCheckout1ViewController

      let bundle = R.hostingBundle
      let hbCheckout1 = StoryboardViewControllerResource<HBCheckout1ViewController>(identifier: "HBCheckout1")
      let name = "HBCheckout"

      func hbCheckout1(_: Void = ()) -> HBCheckout1ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hbCheckout1)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'HBCheckout', but couldn't be loaded.") }
        }
        if _R.storyboard.hbCheckout().hbCheckout1() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hbCheckout1' could not be loaded from storyboard 'HBCheckout' as 'HBCheckout1ViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct hbNotice: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HBNoticeViewController

      let bundle = R.hostingBundle
      let hbNotice = StoryboardViewControllerResource<HBNoticeViewController>(identifier: "HBNotice")
      let name = "HBNotice"

      func hbNotice(_: Void = ()) -> HBNoticeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hbNotice)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.hbNotice().hbNotice() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hbNotice' could not be loaded from storyboard 'HBNotice' as 'HBNoticeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct hbUser: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HBUserViewController

      let bundle = R.hostingBundle
      let name = "HBUser"
      let userController = StoryboardViewControllerResource<HBUserViewController>(identifier: "UserController")

      func userController(_: Void = ()) -> HBUserViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.hbUser().userController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userController' could not be loaded from storyboard 'HBUser' as 'HBUserViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct hbuiCollectionView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HBUICollectionViewController

      let bundle = R.hostingBundle
      let name = "HBUICollectionView"
      let uiCollectionView = StoryboardViewControllerResource<HBUICollectionViewController>(identifier: "UICollectionView")

      func uiCollectionView(_: Void = ()) -> HBUICollectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uiCollectionView)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.hbuiCollectionView().uiCollectionView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uiCollectionView' could not be loaded from storyboard 'HBUICollectionView' as 'HBUICollectionViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if UIKit.UIImage(named: "bell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bell' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'Main', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
